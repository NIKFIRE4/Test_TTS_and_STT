import requests
import wave
import time

def echo_bytes_http(input_file: str = "input.wav", output_file: str = "out_echo.wav"):
    """
    –ß–∏—Ç–∞–µ—Ç WAV —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PCM –±–∞–π—Ç—ã –Ω–∞ /api/echo-bytes,
    –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ.
    """
    # –ß—Ç–µ–Ω–∏–µ WAV –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ PCM –¥–∞–Ω–Ω—ã—Ö
    with wave.open(input_file, 'rb') as wav_file:
        channels = wav_file.getnchannels()
        sample_width = wav_file.getsampwidth()
        framerate = wav_file.getframerate()
        pcm_data = wav_file.readframes(wav_file.getnframes())
    
    print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {channels}ch, {framerate}Hz, {sample_width*8}bit")
    print(f"–†–∞–∑–º–µ—Ä PCM: {len(pcm_data)} –±–∞–π—Ç")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
    fmt_map = {1: "s8", 2: "s16le", 4: "s32le"}
    fmt = fmt_map.get(sample_width, "s16le")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ /api/echo-bytes
    url = f"http://localhost:8000/api/echo-bytes?sr={framerate}&ch={channels}&fmt={fmt}"
    headers = {"Content-Type": "application/octet-stream"}
    
    print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {url}...")
    
    try:
        response = requests.post(url, data=pcm_data, stream=True, headers=headers)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è JSON —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–ª–∏ –ø–µ—Ä–≤–æ–º —á–∞–Ω–∫–µ
        content_type = response.headers.get('Content-Type', '')
        
        pcm_chunks = []
        chunk_count = 0
        
        print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:")
        for chunk in response.iter_content(chunk_size=4096):
            if chunk:
                chunk_count += 1
                pcm_chunks.append(chunk)
                print(f"–§—Ä–µ–π–º {chunk_count}: {len(chunk)} –±–∞–π—Ç, –≤—Ä–µ–º—è: {time.time():.3f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ WAV
        pcm_output = b''.join(pcm_chunks)
        
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã - —ç—Ç–æ JSON
            if pcm_output.startswith(b'{'):
                json_end = pcm_output.find(b'\n')
                if json_end > 0:
                    import json
                    text_data = json.loads(pcm_output[:json_end])
                    print(f"\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_data.get('text', 'N/A')}")
                    if 'segments' in text_data:
                        print(f"–°–µ–≥–º–µ–Ω—Ç—ã: {text_data['segments']}")
                    pcm_output = pcm_output[json_end+1:]
        except:
            pass
        
        with wave.open(output_file, 'wb') as wav_file:
            wav_file.setnchannels(channels)
            wav_file.setsampwidth(sample_width)
            wav_file.setframerate(framerate)
            wav_file.writeframes(pcm_output)
        
        print(f"\n‚úì –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
        print(f"–í—Å–µ–≥–æ —Ñ—Ä–µ–π–º–æ–≤: {chunk_count}, —Ä–∞–∑–º–µ—Ä: {len(pcm_output)} –±–∞–π—Ç")
        
    except requests.exceptions.RequestException as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    echo_bytes_http()
